$date
	Thu Feb 22 17:47:45 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module adder_sub_tb $end
$var wire 1 ! z $end
$var wire 16 " w_result [15:0] $end
$var wire 1 # w_cout $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var reg 1 & alu_fn $end
$var reg 16 ' reg1 [15:0] $end
$var reg 16 ( reg2 [15:0] $end
$scope module uut $end
$var wire 16 ) a [15:0] $end
$var wire 1 & alufn $end
$var wire 16 * b [15:0] $end
$var wire 1 ! z_out $end
$var wire 1 # w_cout $end
$var wire 1 $ v_out $end
$var wire 16 + result [15:0] $end
$var wire 1 % n_out $end
$scope module cla $end
$var wire 1 & cin $end
$var wire 16 , i_add1 [15:0] $end
$var wire 16 - i_add2 [15:0] $end
$var wire 16 . o_result [15:0] $end
$var wire 16 / w_SUM [15:0] $end
$var wire 16 0 w_P [15:0] $end
$var wire 16 1 w_G [15:0] $end
$var wire 17 2 w_C [16:0] $end
$var wire 1 # cout $end
$scope begin genblk1[0] $end
$scope module full_adder_inst $end
$var wire 1 3 aftand1 $end
$var wire 1 4 aftand2 $end
$var wire 1 5 bit1 $end
$var wire 1 6 bit1_xor_bit2 $end
$var wire 1 7 bit2 $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module full_adder_inst $end
$var wire 1 ; aftand1 $end
$var wire 1 < aftand2 $end
$var wire 1 = bit1 $end
$var wire 1 > bit1_xor_bit2 $end
$var wire 1 ? bit2 $end
$var wire 1 @ cin $end
$var wire 1 A cout $end
$var wire 1 B sum $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module full_adder_inst $end
$var wire 1 C aftand1 $end
$var wire 1 D aftand2 $end
$var wire 1 E bit1 $end
$var wire 1 F bit1_xor_bit2 $end
$var wire 1 G bit2 $end
$var wire 1 H cin $end
$var wire 1 I cout $end
$var wire 1 J sum $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module full_adder_inst $end
$var wire 1 K aftand1 $end
$var wire 1 L aftand2 $end
$var wire 1 M bit1 $end
$var wire 1 N bit1_xor_bit2 $end
$var wire 1 O bit2 $end
$var wire 1 P cin $end
$var wire 1 Q cout $end
$var wire 1 R sum $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module full_adder_inst $end
$var wire 1 S aftand1 $end
$var wire 1 T aftand2 $end
$var wire 1 U bit1 $end
$var wire 1 V bit1_xor_bit2 $end
$var wire 1 W bit2 $end
$var wire 1 X cin $end
$var wire 1 Y cout $end
$var wire 1 Z sum $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module full_adder_inst $end
$var wire 1 [ aftand1 $end
$var wire 1 \ aftand2 $end
$var wire 1 ] bit1 $end
$var wire 1 ^ bit1_xor_bit2 $end
$var wire 1 _ bit2 $end
$var wire 1 ` cin $end
$var wire 1 a cout $end
$var wire 1 b sum $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module full_adder_inst $end
$var wire 1 c aftand1 $end
$var wire 1 d aftand2 $end
$var wire 1 e bit1 $end
$var wire 1 f bit1_xor_bit2 $end
$var wire 1 g bit2 $end
$var wire 1 h cin $end
$var wire 1 i cout $end
$var wire 1 j sum $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module full_adder_inst $end
$var wire 1 k aftand1 $end
$var wire 1 l aftand2 $end
$var wire 1 m bit1 $end
$var wire 1 n bit1_xor_bit2 $end
$var wire 1 o bit2 $end
$var wire 1 p cin $end
$var wire 1 q cout $end
$var wire 1 r sum $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module full_adder_inst $end
$var wire 1 s aftand1 $end
$var wire 1 t aftand2 $end
$var wire 1 u bit1 $end
$var wire 1 v bit1_xor_bit2 $end
$var wire 1 w bit2 $end
$var wire 1 x cin $end
$var wire 1 y cout $end
$var wire 1 z sum $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module full_adder_inst $end
$var wire 1 { aftand1 $end
$var wire 1 | aftand2 $end
$var wire 1 } bit1 $end
$var wire 1 ~ bit1_xor_bit2 $end
$var wire 1 !" bit2 $end
$var wire 1 "" cin $end
$var wire 1 #" cout $end
$var wire 1 $" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module full_adder_inst $end
$var wire 1 %" aftand1 $end
$var wire 1 &" aftand2 $end
$var wire 1 '" bit1 $end
$var wire 1 (" bit1_xor_bit2 $end
$var wire 1 )" bit2 $end
$var wire 1 *" cin $end
$var wire 1 +" cout $end
$var wire 1 ," sum $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module full_adder_inst $end
$var wire 1 -" aftand1 $end
$var wire 1 ." aftand2 $end
$var wire 1 /" bit1 $end
$var wire 1 0" bit1_xor_bit2 $end
$var wire 1 1" bit2 $end
$var wire 1 2" cin $end
$var wire 1 3" cout $end
$var wire 1 4" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module full_adder_inst $end
$var wire 1 5" aftand1 $end
$var wire 1 6" aftand2 $end
$var wire 1 7" bit1 $end
$var wire 1 8" bit1_xor_bit2 $end
$var wire 1 9" bit2 $end
$var wire 1 :" cin $end
$var wire 1 ;" cout $end
$var wire 1 <" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module full_adder_inst $end
$var wire 1 =" aftand1 $end
$var wire 1 >" aftand2 $end
$var wire 1 ?" bit1 $end
$var wire 1 @" bit1_xor_bit2 $end
$var wire 1 A" bit2 $end
$var wire 1 B" cin $end
$var wire 1 C" cout $end
$var wire 1 D" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module full_adder_inst $end
$var wire 1 E" aftand1 $end
$var wire 1 F" aftand2 $end
$var wire 1 G" bit1 $end
$var wire 1 H" bit1_xor_bit2 $end
$var wire 1 I" bit2 $end
$var wire 1 J" cin $end
$var wire 1 K" cout $end
$var wire 1 L" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module full_adder_inst $end
$var wire 1 M" aftand1 $end
$var wire 1 N" aftand2 $end
$var wire 1 O" bit1 $end
$var wire 1 P" bit1_xor_bit2 $end
$var wire 1 Q" bit2 $end
$var wire 1 R" cin $end
$var wire 1 S" cout $end
$var wire 1 T" sum $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope begin genblk2[8] $end
$upscope $end
$scope begin genblk2[9] $end
$upscope $end
$scope begin genblk2[10] $end
$upscope $end
$scope begin genblk2[11] $end
$upscope $end
$scope begin genblk2[12] $end
$upscope $end
$scope begin genblk2[13] $end
$upscope $end
$scope begin genblk2[14] $end
$upscope $end
$scope begin genblk2[15] $end
$upscope $end
$upscope $end
$scope module zvn_inst $end
$var wire 16 U" a [15:0] $end
$var wire 1 & alufn_sig $end
$var wire 16 V" b [15:0] $end
$var wire 16 W" s [15:0] $end
$var wire 1 $ v $end
$var wire 1 X" xb $end
$var wire 1 ! z $end
$var wire 1 % n $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1X"
b11110000 W"
b10001 V"
b100000001 U"
0T"
1S"
1R"
1Q"
1P"
0O"
0N"
1M"
0L"
1K"
1J"
1I"
1H"
0G"
0F"
1E"
0D"
1C"
1B"
1A"
1@"
0?"
0>"
1="
0<"
1;"
1:"
19"
18"
07"
06"
15"
04"
13"
12"
11"
10"
0/"
0."
1-"
0,"
1+"
1*"
1)"
1("
0'"
0&"
1%"
0$"
1#"
1""
1!"
1~
0}
0|
1{
0z
1y
0x
1w
0v
1u
1t
0s
1r
0q
0p
1o
1n
0m
0l
0k
1j
0i
0h
1g
1f
0e
0d
0c
1b
0a
0`
1_
1^
0]
0\
0[
1Z
0Y
1X
0W
0V
0U
0T
0S
0R
1Q
1P
1O
1N
0M
0L
1K
0J
1I
1H
1G
1F
0E
0D
1C
0B
1A
1@
1?
1>
0=
0<
1;
0:
19
18
07
16
15
04
13
b11111111000011111 2
b100000000 1
b1111111111101111 0
b11110000 /
b11110000 .
b1111111111101110 -
b100000001 ,
b11110000 +
b10001 *
b100000001 )
b10001 (
b100000001 '
1&
0%
0$
1#
b11110000 "
0!
$end
#10
0#
0B"
0R"
0;"
1<"
05"
0*"
02"
0:"
0J"
1`
1c
1k
1s
0#"
0+"
03"
0C"
1h
1p
1x
1""
1:
03
1$"
0{
0,"
0%"
04"
0-"
0D"
0="
1I
1Q
1Y
0K"
1%
0S"
b1111111111 2
0$
06
14
1T
0~
0("
00"
0@"
1B
0;
0J
1C
0R
1K
1Z
0S
1b
1a
0j
1i
0r
1q
0z
1y
1L"
0E"
b1101001000110011 "
b1101001000110011 +
b1101001000110011 .
b1101001000110011 W"
b1101001000110011 /
1T"
0M"
17
0G
0O
1W
0g
0o
0!"
0)"
01"
0A"
0I"
0Q"
0X"
0>
1<
1F
0D
1N
0L
0V
0^
1\
1f
0d
1n
0l
1v
0t
1H"
0F"
1P"
0N"
b1101000111111111 0
b110011 1
b1000100110011 -
1=
1E
1M
1U
1]
1e
1m
0u
1G"
1O"
b1110111011001100 (
b1110111011001100 *
b1110111011001100 V"
b1100000011111111 '
b1100000011111111 )
b1100000011111111 ,
b1100000011111111 U"
#20
1B"
1;"
0<"
15"
1#
1:"
0%
1S"
13"
0T"
1M"
1-"
1R"
1""
12"
1K"
1y
1+"
1E"
1Z
0z
1s
1%"
1J"
1X
1p
1x
1*"
b11111111111111111 2
1J
0C
0,"
04"
1C"
1Q
1i
1q
1#"
0F
1D
1|
1("
10"
1>"
0:
13
19
0B
1;
1A
0R
1K
0j
1c
0r
1k
1$"
0{
1D"
b10001000110100 "
b10001000110100 +
b10001000110100 .
b10001000110100 W"
b10001000110100 /
0L"
1G
1O
1g
1o
1!"
1)"
11"
1A"
1I"
16
04
1>
0<
1N
1f
1n
0~
0@"
1H"
b10001000110100 1
b1111111111111111 0
b111111111111111 -
05
0=
0M
0e
0m
1}
1?"
0G"
b1000000000000000 (
b1000000000000000 *
b1000000000000000 V"
b1010001000110100 '
b1010001000110100 )
b1010001000110100 ,
b1010001000110100 U"
#30
1!
0J
1C
1I
0Z
1S
1Y
0b
1[
1a
0$"
1{
1#"
0D"
1="
1C"
1A
1Q
1i
1q
1y
1+"
13"
1;"
1K"
1F
0D
1V
0T
1^
0\
1~
0|
1@"
0>"
0B
1;
0R
1K
0j
1c
0r
1k
0z
1s
0,"
1%"
04"
1-"
0<"
15"
b0 "
b0 +
b0 .
b0 W"
b0 /
0L"
1E"
03
0?
0G
0O
0W
0_
0g
0o
0w
0!"
0)"
01"
09"
0A"
0I"
06
14
1>
0<
1N
0L
1f
0d
1n
0l
1v
0t
1("
0&"
10"
0."
18"
06"
1H"
0F"
b1 1
08
b1 -
15
1=
1M
1e
1m
1u
1'"
1/"
17"
1G"
b11111111111111110 2
0&
b1 (
b1 *
b1 V"
b1111111111111111 '
b1111111111111111 )
b1111111111111111 ,
b1111111111111111 U"
#40
0H
0A
1B
0;
0@
0""
0*"
02"
0:"
0B"
0J"
1%
0$
b11000000111111000 2
1:
09
0J
0C
1R
0K
1j
0c
1r
0k
0L"
0E"
1T"
0M"
0y
0#"
0+"
03"
0;"
0C"
16
04
0F
1D
0N
1L
0f
1d
0n
1l
0H"
1F"
0P"
1N"
b1100000011001100 1
1z
0s
1$"
0{
1,"
0%"
14"
0-"
0<"
05"
0!
b1010111111001011 "
b1010111111001011 +
b1010111111001011 .
b1010111111001011 W"
b1010111111001011 /
1D"
0="
07
1G
1O
1g
1o
1!"
1)"
11"
1A"
1I"
1Q"
1X"
0v
1~
1("
10"
08"
1@"
b1110111011111111 0
b1110111011001100 -
0u
0}
0'"
0/"
07"
0?"
b1110111011001100 (
b1110111011001100 *
b1110111011001100 V"
b1100000011111111 '
b1100000011111111 )
b1100000011111111 ,
b1100000011111111 U"
#100000
