$date
	Tue Feb 20 14:51:09 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module shifter_tb $end
$var wire 32 ! w_result [31:0] $end
$var reg 2 " alufn [1:0] $end
$var reg 32 # reg1 [31:0] $end
$var reg 5 $ shift [4:0] $end
$scope module shl0 $end
$var wire 32 % a [31:0] $end
$var wire 2 & alufn [1:0] $end
$var wire 5 ' b [4:0] $end
$var wire 1 ( pad $end
$var wire 32 ) out [31:0] $end
$scope module pad_mux $end
$var wire 1 * D0 $end
$var wire 1 + D1 $end
$var wire 1 , S $end
$var wire 1 ( Y $end
$upscope $end
$scope module shl0 $end
$var wire 32 - a [31:0] $end
$var wire 1 . pad $end
$var wire 1 / shift $end
$var wire 32 0 out [31:0] $end
$var wire 32 1 alt [31:0] $end
$upscope $end
$scope module shl1 $end
$var wire 32 2 a [31:0] $end
$var wire 1 3 pad $end
$var wire 1 4 shift $end
$var wire 32 5 out [31:0] $end
$var wire 32 6 alt [31:0] $end
$upscope $end
$scope module shl2 $end
$var wire 32 7 a [31:0] $end
$var wire 1 8 pad $end
$var wire 1 9 shift $end
$var wire 32 : out [31:0] $end
$var wire 32 ; alt [31:0] $end
$upscope $end
$scope module shl3 $end
$var wire 32 < a [31:0] $end
$var wire 1 = pad $end
$var wire 1 > shift $end
$var wire 32 ? out [31:0] $end
$var wire 32 @ alt [31:0] $end
$upscope $end
$scope module shl4 $end
$var wire 32 A a [31:0] $end
$var wire 1 B pad $end
$var wire 1 C shift $end
$var wire 32 D out [31:0] $end
$var wire 32 E alt [31:0] $end
$upscope $end
$scope module shr0 $end
$var wire 32 F a [31:0] $end
$var wire 1 ( pad $end
$var wire 1 G shift $end
$var wire 32 H out [31:0] $end
$var wire 32 I alt [31:0] $end
$upscope $end
$scope module shr1 $end
$var wire 32 J a [31:0] $end
$var wire 1 ( pad $end
$var wire 1 K shift $end
$var wire 32 L out [31:0] $end
$var wire 32 M alt [31:0] $end
$upscope $end
$scope module shr2 $end
$var wire 32 N a [31:0] $end
$var wire 1 ( pad $end
$var wire 1 O shift $end
$var wire 32 P out [31:0] $end
$var wire 32 Q alt [31:0] $end
$upscope $end
$scope module shr3 $end
$var wire 32 R a [31:0] $end
$var wire 1 ( pad $end
$var wire 1 S shift $end
$var wire 32 T out [31:0] $end
$var wire 32 U alt [31:0] $end
$upscope $end
$scope module shr4 $end
$var wire 32 V a [31:0] $end
$var wire 1 ( pad $end
$var wire 1 W shift $end
$var wire 32 X out [31:0] $end
$var wire 32 Y alt [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module x_bit_shifter_tb $end
$var wire 8 Z w_result [7:0] $end
$var reg 1 [ pad $end
$var reg 8 \ reg1 [7:0] $end
$var reg 1 ] shift $end
$scope module shl0 $end
$var wire 8 ^ a [7:0] $end
$var wire 1 [ pad $end
$var wire 1 ] shift $end
$var wire 8 _ out [7:0] $end
$var wire 8 ` alt [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110000 `
b11110000 _
b1111 ^
1]
b1111 \
0[
b11110000 Z
b11010111111111111111111111 Y
b11010111111111111111111111 X
1W
b110101111111111111111111111 V
b110101111111111111111111111 U
b110101111111111111111111111 T
1S
b11010111111111111111111111111 R
b1101011111111111111111111 Q
b11010111111111111111111111111 P
0O
b11010111111111111111111111111 N
b110101111111111111111 M
b11010111111111111111111111111 L
0K
b11010111111111111111111111111 J
b1101011111111 I
b11010111111111111111111111111 H
0G
b11010111111111111111111111111 F
b11010111111111111111111111111000 E
b11010111111111111111111111111000 D
1C
0B
b1101011111111111111111111111100 A
b1101011111111111111111111111100 @
b1101011111111111111111111111100 ?
1>
0=
b11010111111111111111111111111 <
b10101111111111111111111111110000 ;
b11010111111111111111111111111 :
09
08
b11010111111111111111111111111 7
b11111111111111111111111100000000 6
b11010111111111111111111111111 5
04
03
b11010111111111111111111111111 2
b11111111111111110000000000000000 1
b11010111111111111111111111111 0
0/
0.
b11010111111111111111111111111 -
0,
0+
0*
b11010111111111111111111111 )
0(
b11 '
b1 &
b11010111111111111111111111111 %
b11 $
b11010111111111111111111111111 #
b1 "
b11010111111111111111111111 !
$end
#10
b1111 Z
b1111 _
1,
0]
b11 "
b11 &
#20
b11010111111111111111111111111000 !
b11010111111111111111111111111000 )
0,
b0 "
b0 &
#100000
