$date
	Wed Feb 21 12:16:13 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module zvn_unit_tb $end
$var wire 1 ! z $end
$var wire 16 " w_result [15:0] $end
$var wire 1 # w_cout $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var wire 1 & b_out $end
$var reg 3 ' alu_fn [2:0] $end
$var reg 16 ( reg1 [15:0] $end
$var reg 16 ) reg2 [15:0] $end
$scope module c_unit $end
$var wire 2 * alu_fn [1:0] $end
$var wire 1 ! z $end
$var wire 1 $ v $end
$var wire 1 % n $end
$var wire 1 & b_o $end
$scope module mux $end
$var wire 1 + a $end
$var wire 1 , c $end
$var wire 1 - d $end
$var wire 1 . s0 $end
$var wire 1 / s1 $end
$var wire 1 & out $end
$var wire 1 ! b $end
$upscope $end
$upscope $end
$scope module cla $end
$var wire 1 0 cin $end
$var wire 16 1 i_add1 [15:0] $end
$var wire 16 2 i_add2 [15:0] $end
$var wire 16 3 o_result [15:0] $end
$var wire 16 4 w_SUM [15:0] $end
$var wire 16 5 w_P [15:0] $end
$var wire 16 6 w_G [15:0] $end
$var wire 17 7 w_C [16:0] $end
$var wire 1 # cout $end
$scope begin genblk1[0] $end
$scope module full_adder_inst $end
$var wire 1 8 aftand1 $end
$var wire 1 9 aftand2 $end
$var wire 1 : bit1 $end
$var wire 1 ; bit1_xor_bit2 $end
$var wire 1 < bit2 $end
$var wire 1 = cin $end
$var wire 1 > cout $end
$var wire 1 ? sum $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module full_adder_inst $end
$var wire 1 @ aftand1 $end
$var wire 1 A aftand2 $end
$var wire 1 B bit1 $end
$var wire 1 C bit1_xor_bit2 $end
$var wire 1 D bit2 $end
$var wire 1 E cin $end
$var wire 1 F cout $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module full_adder_inst $end
$var wire 1 H aftand1 $end
$var wire 1 I aftand2 $end
$var wire 1 J bit1 $end
$var wire 1 K bit1_xor_bit2 $end
$var wire 1 L bit2 $end
$var wire 1 M cin $end
$var wire 1 N cout $end
$var wire 1 O sum $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module full_adder_inst $end
$var wire 1 P aftand1 $end
$var wire 1 Q aftand2 $end
$var wire 1 R bit1 $end
$var wire 1 S bit1_xor_bit2 $end
$var wire 1 T bit2 $end
$var wire 1 U cin $end
$var wire 1 V cout $end
$var wire 1 W sum $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module full_adder_inst $end
$var wire 1 X aftand1 $end
$var wire 1 Y aftand2 $end
$var wire 1 Z bit1 $end
$var wire 1 [ bit1_xor_bit2 $end
$var wire 1 \ bit2 $end
$var wire 1 ] cin $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module full_adder_inst $end
$var wire 1 ` aftand1 $end
$var wire 1 a aftand2 $end
$var wire 1 b bit1 $end
$var wire 1 c bit1_xor_bit2 $end
$var wire 1 d bit2 $end
$var wire 1 e cin $end
$var wire 1 f cout $end
$var wire 1 g sum $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module full_adder_inst $end
$var wire 1 h aftand1 $end
$var wire 1 i aftand2 $end
$var wire 1 j bit1 $end
$var wire 1 k bit1_xor_bit2 $end
$var wire 1 l bit2 $end
$var wire 1 m cin $end
$var wire 1 n cout $end
$var wire 1 o sum $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module full_adder_inst $end
$var wire 1 p aftand1 $end
$var wire 1 q aftand2 $end
$var wire 1 r bit1 $end
$var wire 1 s bit1_xor_bit2 $end
$var wire 1 t bit2 $end
$var wire 1 u cin $end
$var wire 1 v cout $end
$var wire 1 w sum $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module full_adder_inst $end
$var wire 1 x aftand1 $end
$var wire 1 y aftand2 $end
$var wire 1 z bit1 $end
$var wire 1 { bit1_xor_bit2 $end
$var wire 1 | bit2 $end
$var wire 1 } cin $end
$var wire 1 ~ cout $end
$var wire 1 !" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module full_adder_inst $end
$var wire 1 "" aftand1 $end
$var wire 1 #" aftand2 $end
$var wire 1 $" bit1 $end
$var wire 1 %" bit1_xor_bit2 $end
$var wire 1 &" bit2 $end
$var wire 1 '" cin $end
$var wire 1 (" cout $end
$var wire 1 )" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module full_adder_inst $end
$var wire 1 *" aftand1 $end
$var wire 1 +" aftand2 $end
$var wire 1 ," bit1 $end
$var wire 1 -" bit1_xor_bit2 $end
$var wire 1 ." bit2 $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 1 1" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module full_adder_inst $end
$var wire 1 2" aftand1 $end
$var wire 1 3" aftand2 $end
$var wire 1 4" bit1 $end
$var wire 1 5" bit1_xor_bit2 $end
$var wire 1 6" bit2 $end
$var wire 1 7" cin $end
$var wire 1 8" cout $end
$var wire 1 9" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module full_adder_inst $end
$var wire 1 :" aftand1 $end
$var wire 1 ;" aftand2 $end
$var wire 1 <" bit1 $end
$var wire 1 =" bit1_xor_bit2 $end
$var wire 1 >" bit2 $end
$var wire 1 ?" cin $end
$var wire 1 @" cout $end
$var wire 1 A" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module full_adder_inst $end
$var wire 1 B" aftand1 $end
$var wire 1 C" aftand2 $end
$var wire 1 D" bit1 $end
$var wire 1 E" bit1_xor_bit2 $end
$var wire 1 F" bit2 $end
$var wire 1 G" cin $end
$var wire 1 H" cout $end
$var wire 1 I" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module full_adder_inst $end
$var wire 1 J" aftand1 $end
$var wire 1 K" aftand2 $end
$var wire 1 L" bit1 $end
$var wire 1 M" bit1_xor_bit2 $end
$var wire 1 N" bit2 $end
$var wire 1 O" cin $end
$var wire 1 P" cout $end
$var wire 1 Q" sum $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module full_adder_inst $end
$var wire 1 R" aftand1 $end
$var wire 1 S" aftand2 $end
$var wire 1 T" bit1 $end
$var wire 1 U" bit1_xor_bit2 $end
$var wire 1 V" bit2 $end
$var wire 1 W" cin $end
$var wire 1 X" cout $end
$var wire 1 Y" sum $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope begin genblk2[8] $end
$upscope $end
$scope begin genblk2[9] $end
$upscope $end
$scope begin genblk2[10] $end
$upscope $end
$scope begin genblk2[11] $end
$upscope $end
$scope begin genblk2[12] $end
$upscope $end
$scope begin genblk2[13] $end
$upscope $end
$scope begin genblk2[14] $end
$upscope $end
$scope begin genblk2[15] $end
$upscope $end
$upscope $end
$scope module zvn_inst $end
$var wire 16 Z" a [15:0] $end
$var wire 1 [" alufn_sig $end
$var wire 16 \" b [15:0] $end
$var wire 16 ]" s [15:0] $end
$var wire 1 $ v $end
$var wire 1 ^" xb $end
$var wire 1 ! z $end
$var wire 1 % n $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1^"
b11110000 ]"
b10001 \"
1["
b100000001 Z"
0Y"
1X"
1W"
1V"
1U"
0T"
0S"
1R"
0Q"
1P"
1O"
1N"
1M"
0L"
0K"
1J"
0I"
1H"
1G"
1F"
1E"
0D"
0C"
1B"
0A"
1@"
1?"
1>"
1="
0<"
0;"
1:"
09"
18"
17"
16"
15"
04"
03"
12"
01"
10"
1/"
1."
1-"
0,"
0+"
1*"
0)"
1("
1'"
1&"
1%"
0$"
0#"
1""
0!"
1~
0}
1|
0{
1z
1y
0x
1w
0v
0u
1t
1s
0r
0q
0p
1o
0n
0m
1l
1k
0j
0i
0h
1g
0f
0e
1d
1c
0b
0a
0`
1_
0^
1]
0\
0[
0Z
0Y
0X
0W
1V
1U
1T
1S
0R
0Q
1P
0O
1N
1M
1L
1K
0J
0I
1H
0G
1F
1E
1D
1C
0B
0A
1@
0?
1>
1=
0<
1;
1:
09
18
b11111111000011111 7
b100000000 6
b1111111111101111 5
b11110000 4
b11110000 3
b1111111111101110 2
b100000001 1
10
1/
0.
0-
0,
z+
b10 *
b10001 )
b100000001 (
b101 '
0&
0%
0$
1#
b11110000 "
0!
$end
#10
1&
1-
0#
1,
0G"
0W"
0@"
1A"
0:"
0/"
07"
0?"
0O"
1e
1h
1p
1x
0("
00"
08"
0H"
1m
1u
1}
1'"
1?
08
1)"
0""
01"
0*"
09"
02"
0I"
0B"
1N
1V
1^
0P"
1%
0X"
b1111111111 7
0$
0;
19
1Y
0%"
0-"
05"
0E"
1G
0@
0O
1H
0W
1P
1_
0X
1g
1f
0o
1n
0w
1v
0!"
1~
1Q"
0J"
b1101001000110011 "
b1101001000110011 3
b1101001000110011 ]"
b1101001000110011 4
1Y"
0R"
0^"
1<
0L
0T
1\
0l
0t
0&"
0."
06"
0F"
0N"
0V"
0C
1A
1K
0I
1S
0Q
0[
0c
1a
1k
0i
1s
0q
1{
0y
1M"
0K"
1U"
0S"
b1101000111111111 5
b110011 6
b1000100110011 2
1B
1J
1R
1Z
1b
1j
1r
0z
1L"
1T"
b1110111011001100 )
b1110111011001100 \"
b1100000011111111 (
b1100000011111111 1
b1100000011111111 Z"
#20
1G"
0&
1@"
0-
0A"
1:"
1#
0,
1?"
0%
1X"
18"
0Y"
1R"
12"
1W"
1'"
17"
1P"
1~
10"
1J"
1_
0!"
1x
1*"
1O"
1]
1u
1}
1/"
b11111111111111111 7
1O
0H
01"
09"
1H"
1V
1n
1v
1("
0K
1I
1#"
1-"
15"
1C"
0?
18
1>
0G
1@
1F
0W
1P
0o
1h
0w
1p
1)"
0""
1I"
b10001000110100 "
b10001000110100 3
b10001000110100 ]"
b10001000110100 4
0Q"
1L
1T
1l
1t
1&"
1."
16"
1F"
1N"
1;
09
1C
0A
1S
1k
1s
0%"
0E"
1M"
b10001000110100 6
b1111111111111111 5
b111111111111111 2
0:
0B
0R
0j
0r
1$"
1D"
0L"
b1000000000000000 )
b1000000000000000 \"
b1010001000110100 (
b1010001000110100 1
b1010001000110100 Z"
#30
1&
1-
1,
0$
1%
1Y"
0R"
1>
0U"
1S"
0?
18
1G
0@
1W
0P
1o
0h
1w
0p
1!"
0x
11"
0*"
19"
02"
1A"
0:"
b1111111111111110 "
b1111111111111110 3
b1111111111111110 ]"
b1111111111111110 4
1Q"
0J"
1^"
0<
1V"
1;
09
0C
1A
0S
1Q
0k
1i
0s
1q
0{
1y
0-"
1+"
05"
13"
0="
1;"
0M"
1K"
b1111111111111110 6
b1111111111111110 2
1:
1B
1R
1j
1r
1z
1,"
14"
1<"
1L"
b1 )
b1 \"
b1111111111111111 (
b1111111111111111 1
b1111111111111111 Z"
#40
0#
0G"
0W"
1&
1-
0/"
07"
0?"
0O"
1,
b1111111111 7
1%
1?
08
0O
1H
1N
0W
1P
1V
0o
1h
1n
0w
1p
1v
1Q"
0J"
0P"
1Y"
0R"
0X"
0;
19
1K
0I
1S
0Q
1k
0i
1s
0q
1M"
0K"
1U"
0S"
b1101000111111111 5
0!"
1x
1~
1)"
0""
0("
01"
0*"
00"
09"
02"
08"
1A"
0:"
0@"
b1101001000110011 "
b1101001000110011 3
b1101001000110011 ]"
b1101001000110011 4
0I"
0B"
0H"
0^"
1<
0L
0T
0l
0t
0&"
0."
06"
0F"
0N"
0V"
1{
0y
0%"
0#"
0-"
0+"
05"
03"
1="
0;"
0E"
0C"
b110011 6
b1000100110011 2
0z
0$"
0,"
04"
0<"
0D"
b1110111011001100 )
b1110111011001100 \"
b1100000011111111 (
b1100000011111111 1
b1100000011111111 Z"
#100000
